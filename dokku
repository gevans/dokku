#!/usr/bin/env bash
set -e
set -o pipefail
export PLUGIN_PATH=${PLUGIN_PATH:="/var/lib/dokku/plugins"}
case "$1" in
  receive)
    APP="$2"; IMAGE="app/$APP"
    echo "-----> Building $APP ..."
    cat | dokku build $APP $IMAGE
    echo "-----> Build complete!"
    echo "-----> Releasing $APP ..."
    dokku release $APP $IMAGE
    echo "-----> Release complete!"
    echo "-----> Deploying $APP ..."
    dokku deploy $APP $IMAGE
    echo "-----> Deploy complete!"
    echo "-----> Cleaning up ..."
    dokku cleanup
    echo "-----> Cleanup complete!"
    echo "=====> Application deployed:"
    echo "       $(dokku url $APP)"
    echo
    ;;

  build)
    APP="$2"; IMAGE="$3"
    if [[ ! -f "$HOME/$APP/VOLUME" ]]; then
      # First build
      VOLUME="/app"
    else
      VOLUME="$(cat "$HOME/$APP/VOLUME")/layer:/app"
    fi
    id=$(cat | docker run -v $VOLUME -i -a stdin progrium/buildstep /bin/bash -c "mkdir -p /build/app && tar -xC /build/app")
    test $(docker wait $id) -eq 0
    docker commit $id $IMAGE > /dev/null
    CACHE_PATH="$HOME/cache/$APP"
    [ ! -d $CACHE_PATH ] && mkdir -p $CACHE_PATH
    id=$(docker run -volumes-from $id -v $CACHE_PATH:/cache -d $IMAGE /build/builder)
    docker attach $id
    test $(docker wait $id) -eq 0
    docker commit $id $IMAGE > /dev/null
    # Store volume path (HAX: this should be in release or deploy)
    VOLUME_PATH=$(docker inspect $id | grep "/var/lib/docker/volumes/" | awk '{print $2}' | sed -e"s/\/layer//" | sed -e's/[",]//g')
    echo $VOLUME_PATH > "$HOME/$APP/VOLUME"
    # Link release path to volume (HAX: this should be in release or deploy)
    mkdir -p $HOME/apps
    APP_PATH="$HOME/apps/$APP"
    [[ -L $APP_PATH ]] && rm $APP_PATH
    ln -s "$VOLUME_PATH/layer" $APP_PATH
    ;;

  release)
    APP="$2"; IMAGE="$3"
    pluginhook pre-release $APP $IMAGE
    if [[ -f "$HOME/$APP/ENV" ]]; then
      id=$(cat "$HOME/$APP/ENV" | docker run -i -a stdin $IMAGE /bin/bash -c "mkdir -p /app/.profile.d && cat > /app/.profile.d/app-env.sh")
      test $(docker wait $id) -eq 0
      docker commit $id $IMAGE > /dev/null
    fi
    pluginhook post-release $APP $IMAGE
    ;;

  deploy)
    APP="$2"; IMAGE="$3"
    if [[ -f "$HOME/$APP/VOLUME" ]]; then
      VOLUME="$(cat "$HOME/$APP/VOLUME")/layer:/app"
    else
      VOLUME="/app"
    fi
    pluginhook pre-deploy $APP $IMAGE
    if [[ ! -f "$HOME/$APP/PORT" ]]; then
      # First deploy
      id=$(docker run -v $VOLUME -d -p 5000 -e PORT=5000 $IMAGE /bin/bash -c "/start web")
      echo $id > "$HOME/$APP/CONTAINER"
      port=$(docker port $id 5000)
      echo $port > "$HOME/$APP/PORT"
      echo "$(< "$HOME/HOSTNAME"):$port" > "$HOME/$APP/ADDRESS"
    else
      # Regular deploy
      oldid=$(< "$HOME/$APP/CONTAINER")
      docker kill $oldid > /dev/null
      port=$(< "$HOME/$APP/PORT")
      id=$(docker run -v $VOLUME -d -p ":$port" -e "PORT=$port" $IMAGE /bin/bash -c "/start web")
      echo $id > "$HOME/$APP/CONTAINER"
    fi
    pluginhook post-deploy $APP $port
    ;;

  cleanup)
    # delete all non-running container
    docker ps -a | grep 'Exit' |  awk '{print $1}' | xargs docker rm &> /dev/null &
    # delete unused images
    docker images | grep '<none>' |  awk '{print $3}'  | xargs docker rmi &> /dev/null &
    ;;

  plugins)
    ls -1 -d $PLUGIN_PATH/*/
    ;;

  plugins-install)
    pluginhook install
    ;;

  # temporary hack for https://github.com/progrium/dokku/issues/82
  deploy:all)
    for app in $(ls -d $HOME/*/); do
      APP=$(basename $app);
      IMAGE="app/$APP"
      dokku deploy $APP $IMAGE
    done
    ;;

  help)
    cat<<EOF | pluginhook commands help | sort
    help            Print the list of commands
    plugins         Print active plugins
    plugins-install Install active plugins
EOF
    ;;

  *)
    pluginhook commands "$@"
    ;;

esac
